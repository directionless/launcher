// Code generated by go-bindata. DO NOT EDIT.
// sources:
// testdata/assets/AppFiles.wxs
// testdata/assets/product.wxs
package testdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testdataAssetsAppfilesWxs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xdb\x6e\xe4\xc6\x11\x7d\x5f\xc0\xff\x40\x74\x82\xc0\x7e\xa0\xa6\xef\x17\x47\x94\xd1\xd7\x85\xe0\xc0\x2b\x48\x6b\xef\x43\x94\x07\x2e\xa7\x25\x11\xe0\x90\x93\x26\x47\x3b\xfa\xb6\x3c\xe4\x93\xf2\x0b\xc1\x5c\x38\x5e\x69\x75\x61\x22\xc1\x4f\x33\x4d\x16\x4f\x57\x9f\x3a\x55\xd5\xf5\x9f\x7f\xfd\xfb\xf8\xa7\xf5\xa2\xc9\x6e\x63\xea\xeb\xae\x2d\x00\x3a\x82\x20\x8b\x6d\xd5\xcd\xeb\xf6\xba\x00\xab\xe1\x2a\x97\xe0\xa7\x93\xef\xde\x1d\x7f\xaa\xd7\xd9\x7a\xd1\xb4\x7d\x01\x6e\x86\x61\xf9\xe3\x6c\xd6\x57\x37\x71\x51\xf6\x47\x8b\xba\x4a\x5d\xdf\x5d\x0d\x47\x55\xb7\x98\x7d\xa9\xd7\x33\x0c\x21\x9f\x7d\xa9\xc1\xc9\x77\xef\xb2\x2c\xcb\x8e\x43\x2a\xaf\x17\xb1\x1d\xf6\xeb\xed\x33\x57\xa7\x58\x0d\x5d\xba\x3b\x8f\x57\xd9\xe9\xbc\x00\x67\xe7\x1f\xde\xbb\xd3\x73\xf0\x95\xd1\x7d\xc3\xad\xd5\xbc\x4e\x9a\x68\x6e\xb9\x09\x46\x04\x65\x24\xc4\x98\xa0\x80\x94\x75\xdc\x68\x28\x1d\xa2\x20\xfb\xa5\x5c\xc4\x02\xfc\xad\x5c\xb5\xd5\x4d\x4c\x79\xb3\xff\xf3\x10\xfa\x71\x78\xcc\x05\x15\xdc\x60\x85\xac\xa6\x88\xf0\x00\x39\xb1\x01\x71\x2e\xb0\x84\x52\xa1\x11\xfe\x73\xdd\x3e\x06\xb8\x05\xb5\xdd\x62\xd9\xb5\xb1\x1d\xb6\xa0\xd5\x62\xc9\x89\xf1\xca\x79\x88\x9d\x08\x58\x0a\xcf\x88\x60\xce\x4a\xad\x04\x94\xd8\x68\x04\xb2\xf7\xab\x7a\x5e\x00\x84\xa1\x20\x4c\xf9\x5c\x38\x23\x72\x8a\x58\xc8\x25\x77\x22\x87\xd6\x6a\xe3\x29\x74\xd4\xe0\xa7\x76\xdd\x51\x5d\x37\x71\xbb\xe9\x55\xdd\x68\x03\xa1\x11\x52\x7b\x19\xac\x36\x52\x08\x2f\xa1\x91\xd0\x71\x2a\xbd\x27\xde\x81\xec\xe7\x78\x77\x56\x0e\x37\x05\xb8\x8b\x3d\xc8\x2e\xba\x55\xaa\x62\x01\xfe\xfc\xfd\x6d\x99\x8e\x76\x2b\x57\xa7\x1f\x2e\xbf\x61\xf2\xf2\x73\xdd\x5e\x8e\x8b\xa3\xb8\x8e\x20\x9b\x3d\xc5\xc5\x45\x4c\xb7\x75\x15\x4f\xdb\x7e\x28\x9b\x26\xd3\x55\xd5\xad\xda\xa1\x00\x7f\xbf\xf0\xe7\xbf\x9d\x5a\xaf\xad\xfd\xf0\xeb\x2f\x1f\xff\x01\x32\x9d\xae\x57\x1b\x99\xf4\x05\xe8\x6f\xab\x2c\xaf\xba\xf6\xaa\xbe\xce\xfe\xf2\x27\x42\xff\x6a\x7f\xbc\x3c\x4b\xdd\x75\x2a\x17\xd9\xe6\x88\xfd\xe5\xcf\x5d\x53\xcf\xe3\x23\xae\x6d\xbe\xfa\xdd\xb7\xab\xa6\xbc\xee\xb7\x08\x20\x73\xb1\xaf\x52\xbd\x1c\xb6\x4a\xff\x78\x13\xb3\x1d\x46\x36\x62\x64\xdf\x8f\x9f\xfd\x00\x32\x9f\x52\x97\x6c\xd7\x0e\xa9\x6b\x0a\xd0\x76\x69\x51\x36\x60\xcb\xec\x68\x3e\xfe\x5e\xdc\x56\x0f\x25\x77\xef\xd5\xc5\x50\xa6\xa1\x00\xe5\x6a\xe8\x40\xf6\xf1\x6e\x19\x0b\xd0\x7d\x69\xcf\x52\x57\xc5\xbe\x07\xd9\x6f\xf5\x50\x36\xbb\x08\x9c\x3c\x1d\xd7\x3d\x8b\x76\x47\xc9\xd4\x44\xfc\x75\xa8\x1b\xbf\x1e\x62\xbb\xc9\x6e\x90\x85\x3a\xf5\x43\x28\xeb\x66\x95\xa2\xae\x36\x3c\xec\xdc\x49\xb1\xdf\xf8\x08\xb2\x8b\x58\x75\xed\xfc\x39\x8b\x8f\x37\x75\x7a\xd6\xe0\x7c\xf7\x67\xef\xaf\x8b\x4d\x79\x77\xda\xee\x70\xfb\x02\xb0\xad\x41\x1c\xce\x62\xaa\xbb\xf9\x69\xeb\xca\xbb\xbe\x00\x08\x9c\x1c\xcf\xee\x9d\xf0\xcd\x99\x18\x4b\x52\xb6\xf5\x28\xce\xf5\x6a\xe8\xf6\x81\xd9\x6a\xff\x43\xbb\x17\xe8\x61\x7d\x1e\xeb\xaf\x9f\x4c\xf3\xf0\x60\xb4\x47\x7b\xc2\xea\x77\xa4\x8d\xbc\x9e\x13\xcf\x93\x82\x3b\x8f\x8b\xee\x36\x16\x60\xd5\xee\xdd\x3c\x08\xed\xab\x75\xb7\x2c\xc0\xe7\x6e\xb8\x01\xd9\xa7\xb2\x1e\x36\x32\xbe\x7f\x8e\xcd\xee\x4f\x1d\xe4\x50\xc3\xa6\x17\x39\x0c\x99\xb3\x2a\x60\x6e\x4c\xe0\x3c\x50\x24\x30\x57\x5a\x85\x60\x7d\xe0\x48\x8d\x45\x0e\x12\x17\x8c\x50\x3a\x17\x3e\x98\x9c\x72\x0f\x73\x09\x15\xca\x99\xe2\xcc\x53\xc6\x25\x92\x7e\x72\x91\x43\x52\x61\x6c\x8d\xf5\x5a\x28\x44\xa1\xb4\x32\x58\x2c\x90\x54\x02\x2b\x2e\x84\x7d\x65\x91\xeb\xfa\x7f\xae\x62\xba\xcb\xe3\x98\x45\x2f\x54\xbb\xff\x83\x36\x49\xa4\xc7\x58\x84\x20\x94\x82\x8a\x6b\x2d\x36\x7c\x99\x40\x98\xc3\xcc\x42\x71\xe8\x0d\x41\x39\xea\x3c\xcc\x39\x71\x2e\xa7\xcc\xeb\x5c\x4a\xa4\x72\x2f\x18\x77\xda\x60\xc5\x91\x98\x4c\x9b\x71\x41\x30\x8b\x0c\x42\xc6\x13\xe1\x09\x71\x14\x12\x66\x25\x25\x86\x78\x44\xc5\xdb\xd0\x36\x7f\x0d\x5b\xc7\xb3\x43\x6f\x9e\xd4\xb8\x37\x5c\x49\x4d\x82\x76\x94\x18\xe1\x34\x94\x5c\x29\xe8\x21\x72\xca\x11\x05\xd9\x58\xa4\x37\x0d\x62\x7a\xe7\x16\xd8\x23\x6e\x91\x22\x9c\xaa\x10\x30\xd1\x12\x4a\xab\xa5\xe0\xc6\x49\x2e\xa4\x1b\xa3\xc3\xa1\xb1\xd2\x10\x9a\x63\xa2\xc2\x26\x3a\x2a\x57\x81\xf8\x5c\x5a\xaa\x30\x92\x5a\x50\xcc\x27\x47\x47\x3a\xae\x38\xa3\x8c\x7a\xab\xa0\x31\x96\x68\x42\x31\x77\xd0\x51\x15\xbc\x65\xe4\x15\xd1\xd9\xb6\xc7\x7d\x89\x88\x29\xaf\xdb\xab\xee\x68\xbd\x68\xde\x56\xd2\x21\x40\xa6\x99\xd4\x44\x1b\x27\x8c\x0d\xd6\x61\xe3\x0c\x45\x48\x69\xe7\x82\xc6\x23\x69\x94\x78\x66\x99\xc5\xb9\xf4\x81\xe4\x14\x51\x97\x2b\x17\x64\x4e\xa1\xf5\x82\x21\x63\x39\x81\x93\x49\xc3\x8e\x6b\x0d\x25\xf6\xc1\x1a\xc6\x94\x26\xdc\x2a\x8d\x14\x51\xd6\xc1\xc0\x34\x7f\x2d\x69\xf7\xef\x14\x6f\x4b\x18\x32\xc4\x73\xee\x95\x09\x9a\x06\x89\x3d\x0b\x96\x48\x8f\x38\xc4\x0a\x41\x66\x0e\xf7\x43\xa7\x85\x96\x9b\xcc\xc7\xc6\x85\x9c\x1a\x49\x72\x6d\x3c\xcb\x09\x96\xd6\x40\xaf\x1c\xfc\x1f\xee\x87\x9c\x39\x49\x88\x26\x4c\x04\x8e\x19\xe5\x2e\x08\x67\x99\x75\x12\x43\x46\x20\xc7\xaf\x25\xac\x8f\x55\x8a\xc3\x1f\x95\xfe\x4a\x42\xc6\xac\xc4\x4e\x09\x2e\xa5\xc5\x4a\x13\x1a\xa4\xc4\x48\x41\x26\x04\x0a\x63\xfa\xcf\xcb\xa1\x9c\x9e\xfe\x0c\x52\x0d\x0d\x57\x42\x4b\x4e\xbc\xd5\xc4\x72\x15\x88\xc6\xc4\x5b\x6e\xa4\xb3\x63\x60\x14\x0d\xdc\x59\xc8\x72\xa5\x20\xcc\x29\x32\x2e\x37\x02\x87\x9c\x71\xe6\xb8\x70\x8c\x05\xf3\x90\xcf\xe7\xc2\x64\x53\x2c\x87\x18\xba\x66\x1e\xd3\x9b\xf3\xf7\xf8\x9b\xaf\x9e\x9e\xc7\xab\x71\x74\x9b\x3d\x98\xdd\x1e\x9d\xe5\x0e\x6e\xbc\x4f\xdd\x6a\xb9\xa5\x4e\x2f\x97\xdb\x7b\xfa\x37\xe3\xdc\xc1\x76\x9c\xfb\x26\x4d\x47\x0f\x29\x78\x1c\xe6\xc5\xfb\xc7\x24\x98\x97\xfb\xf1\x24\x98\x97\x1b\xc7\x24\x98\x97\x4b\xe9\x24\x98\x97\x0b\xcc\x24\x98\x97\xd3\x61\x76\x4f\x52\xf7\x95\xf1\x98\xa8\x8e\x67\x9f\xea\xf5\xc9\xbb\xff\x06\x00\x00\xff\xff\x9f\xbe\x17\x8f\x8b\x10\x00\x00")

func testdataAssetsAppfilesWxsBytes() ([]byte, error) {
	return bindataRead(
		_testdataAssetsAppfilesWxs,
		"testdata/assets/AppFiles.wxs",
	)
}

func testdataAssetsAppfilesWxs() (*asset, error) {
	bytes, err := testdataAssetsAppfilesWxsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/assets/AppFiles.wxs", size: 4235, mode: os.FileMode(420), modTime: time.Unix(1596292561, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataAssetsProductWxs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x5f\x6f\xea\x38\x10\xc5\x9f\x93\x4f\x31\x6b\x55\xa2\xad\x04\x81\x6d\x85\xaa\x0a\x83\x58\x28\x5d\xd4\x76\x17\x51\xb8\x7d\x36\xf1\x24\xb1\x6e\x62\x47\xb6\x43\xc3\xb7\xbf\x72\x0c\x94\xfe\xb9\x52\xef\x1b\x8c\x3d\xe7\x9c\xcc\x6f\x3c\x18\xd5\x45\x0e\x5b\xd4\x46\x28\x49\x49\xaf\xd3\x25\x80\x32\x56\x5c\xc8\x94\x92\xf5\x6a\xd6\xbe\x21\xa3\x61\x38\x78\x11\x35\xd4\x45\x2e\x0d\x25\x99\xb5\xe5\x6d\x14\x99\x38\xc3\x82\x99\x4e\x21\x62\xad\x8c\x4a\x6c\x27\x56\x45\xf4\x2a\xea\xe8\xef\x6e\xb7\x1f\xbd\x0a\xe2\x1b\x6e\x2b\x2b\xf2\x6f\x74\xad\xad\xc8\xef\x6a\x8b\xd2\x25\x21\xc3\x10\x60\x30\x12\x09\x9c\x9d\x9b\x9d\xe9\xfc\xb3\x9e\x3f\x4e\xc7\xcb\xc9\xbf\x17\x94\xd4\x37\x7d\x17\x09\xc0\xdd\xe0\x98\x08\x89\xb0\xd0\x2a\x9d\xa9\x9c\xa3\xa6\xee\xa7\x66\xc5\x4c\xe4\x68\x7c\x09\x46\x5e\x0d\x73\x83\x5f\x2b\xf6\xaf\xbf\xab\xd8\xbf\xfe\xac\x79\x6c\x45\xad\x95\x86\xb5\x34\x55\x59\x2a\x6d\x91\xc3\x96\xe5\x15\x82\x4a\xe0\x9d\x25\xfd\x18\xe1\x20\x26\xb9\x48\x46\xc3\xd0\xfd\x59\x68\xc5\xab\xd8\xc2\x9c\x53\x72\x49\xc2\x00\x00\xfe\x63\x05\x52\xe2\x48\xac\xd0\x58\x5f\x7b\x64\x32\xad\x58\x8a\x94\xf4\xba\x57\x57\xbe\xf6\xe3\x84\x66\xa7\xeb\x6b\x4f\x4c\x56\x09\x8b\x6d\xa5\x51\x03\x05\xf2\xa0\x72\xc1\xd1\x9f\xad\xcb\x54\x33\x8e\x13\xc5\xd1\x79\xc1\x30\x0c\x83\xc1\x82\xc5\x3f\x59\x8a\x61\x30\xe7\xb4\x75\xd9\x0a\x83\x07\xdc\xbd\x2a\xcd\x0d\x6d\xcd\xa5\xb1\x2c\xcf\x51\xb7\xc2\x60\x8a\x26\xd6\xa2\xb4\x8d\x9f\x17\x6d\xd2\xc1\x8b\xa8\x49\x18\x4c\x54\x51\xa0\xb4\xe6\xab\xb3\xa3\xcc\x31\xef\x55\xb7\xeb\x7b\x4a\x8d\xc6\x20\xa7\x64\x87\xe6\xed\xe6\x73\xac\x4a\xa4\xa4\x44\xfd\xc4\xe2\x4c\x48\x17\xff\xf0\xfd\x66\x3f\x00\x88\x9a\xf1\x01\x0c\xfe\x6a\xb7\x61\x95\x09\x03\x99\xca\xb9\x01\x9b\x21\x24\x8e\x20\xa4\x28\x51\x33\x47\x67\xb3\x83\x0c\x99\x85\x76\x7b\x4f\xf0\x09\xb9\x60\x6e\xe4\xad\x5e\x0b\x26\x6c\x23\x24\x5a\x4a\x52\xd5\x89\xd9\x86\xc0\x5d\xb1\x41\x3e\x61\x1b\x1f\x0b\x0e\x39\x85\x92\x8f\xb8\x45\xb7\xe3\x22\xcd\x4e\x12\x4c\x85\xc6\xd8\x2a\xbd\x6b\x20\xae\xc6\xcb\xfb\xbb\xd5\x74\xbe\x24\x7b\x90\xcf\xaa\xd2\x31\x4e\x85\x26\xde\xfd\x53\xc7\xd9\xf9\x96\xe9\xce\xdb\x22\x5e\x90\x61\x18\x7c\xb8\xb3\x58\xfe\x7f\x7f\xa2\xb9\xc7\x1a\x1d\x15\xa3\xe3\xf5\xdf\x98\x38\x42\x4a\x8e\xcb\x72\xca\x2c\xf3\x3e\x5f\xd8\x4c\xc7\xab\xf1\x9f\xd8\xbc\x2b\x84\x41\x03\x63\x4f\xf1\x84\xc4\x71\xee\x33\x64\x6e\x33\x9b\x65\x23\x6e\x45\x9a\xb7\x46\xc2\x60\x25\x6c\x8e\xbe\xe4\x60\xfb\x31\xf7\xde\x06\xe6\x18\x28\x89\xd2\xde\x6b\x55\x95\x4b\x4c\x9a\xb4\xe3\xb2\xf4\x02\x10\x1d\xe2\xec\x1d\xfc\xdb\x8a\xf6\x8f\x6b\x18\x0e\xa2\x17\x51\x0f\xc3\x5f\x01\x00\x00\xff\xff\xbe\x0c\x7b\xf3\x06\x05\x00\x00")

func testdataAssetsProductWxsBytes() ([]byte, error) {
	return bindataRead(
		_testdataAssetsProductWxs,
		"testdata/assets/product.wxs",
	)
}

func testdataAssetsProductWxs() (*asset, error) {
	bytes, err := testdataAssetsProductWxsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/assets/product.wxs", size: 1286, mode: os.FileMode(420), modTime: time.Unix(1571629580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testdata/assets/AppFiles.wxs": testdataAssetsAppfilesWxs,
	"testdata/assets/product.wxs": testdataAssetsProductWxs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"testdata": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"AppFiles.wxs": &bintree{testdataAssetsAppfilesWxs, map[string]*bintree{}},
			"product.wxs": &bintree{testdataAssetsProductWxs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

